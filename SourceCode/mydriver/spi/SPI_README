SPI
	主机控制器驱动 + 外设驱动

	主机控制器A驱动				外设a驱动
				核心
				层：
	主机控制器B驱动		主机		外设b驱动
				驱动
				通用
	主机控制器C驱动		API		外设c驱动

2 Linux SPI驱动总体架构
	SPI的驱动架构可以分为如下三个层次：
	   SPI核心层、SPI控制器驱动层和SPI设备驱动层。
      	Linux中SPI驱动代码位于drivers/spi目录
2.1 SPI核心层
      SPI核心层是Linux的SPI核心部分，提供了核心数据结构的定义、SPI控制器驱动和设备驱动的注册、注销管理等API。其为硬件平台无关层，向下屏蔽了物理总线控制器的差异，定义了统一的访问策略和接口；其向上提供了统一的接口，以便SPI设备驱动通过总线控制器进行数据收发。
      Linux中，SPI核心层的代码位于driver/spi/spi.c。由于该层是平台无关层，本文将不再叙述，有兴趣可以查阅相关资料。
2.2 SPI控制器驱动层
      SPI控制器驱动层，每种处理器平台都有自己的控制器驱动，属于平台移植相关层。它的职责是为系统中每条SPI总线实现相应的读写方法。在物理上，每个SPI控制器可以连接若干个SPI从设备。
      在系统开机时，SPI控制器驱动被首先装载。一个控制器驱动用于支持一条特定的SPI总线的读写。一个控制器驱动可以用数据结构struct spi_master来描述。
2.3 SPI设备驱动层
      SPI设备驱动层为用户接口层，其为用户提供了通过SPI总线访问具体设备的接口。
      SPI设备驱动层可以用两个模块来描述，struct spi_driver和struct spi_device。
  

在Linux中，使用spi_master结构来描述一个SPI主机控制器的驱动。
struct spi_master {
	struct device dev;/*总线编号，从0开始 */
	s16  bus_num;/*支持的片选的数量，从设备的片选号不能大于这个数量*/
	u16 num_chipselect;
	u16  dma_alignment;/*改变spi_device的特性如：传输模式，字长，时钟频率*/
	int  (*setup)(struct spi_device *spi);/*添加消息到队列的方法，这个函数不可睡眠，他的任务是安排发生的传送并且调用注册的回调函数complete()*/
	int (*transfer)(struct spi_device *spi,struct spi_message *mesg);
	void   (*cleanup)(struct spi_device *spi);
};

分配，注册和注销的SPI主机的API由SPI核心提供：
1.	struct spi_master *spi_alloc_master(struct device *host, unsigned size);
2.	int spi_register_master(struct spi_master *master);  
3.	void spi_unregister_master(struct spi_master *master); 

在Linux中用spi_driver来描述一个SPI外设驱动。
	struct spi_driver {  
	int   (*probe)(struct spi_device *spi);  
	int   (*remove)(struct spi_device *spi);  
	void  (*shutdown)(struct spi_device *spi);  
	int   (*suspend)(struct spi_device *spi, pm_message_t mesg);  
	int   (*resume)(struct spi_device *spi);  
	struct device_driver  driver;  
	};  

Linux用spi_device来描述一个SPI外设设备。
1.	struct spi_device {  
2.	struct device        dev;  
3.	struct spi_master   *master;       //对应的控制器指针u32      
4.	max_speed_hz;  //spi通信的时钟u8         
5.	chip_select;   //片选，用于区分同一总线上的不同设备  
6.	u8  mode;  
7.	#define    SPI_CPHA    0x01            /* clock phase */  
8.	#define    SPI_CPOL    0x02            /* clock polarity */  
9.	#define SPI_MODE_0  (0|0)           /* (original MicroWire) */#define   SPI_MODE_1  (0|SPI_CPHA)  
10.	#define SPI_MODE_2  (SPI_CPOL|0)  
11.	#define SPI_MODE_3  (SPI_CPOL|SPI_CPHA)#define  SPI_CS_HIGH 0x04            /* chipselect active high? */  
12.	#define    SPI_LSB_FIRST   0x08            /* per-word bits-on-wire */  
13.	#define  SPI_3WIRE   0x10            /* SI/SO signals shared */  
14.	#define   SPI_LOOP    0x20            /* loopback mode */  
15.	u8      bits_per_word;    //每个字长的比特数  
16.	int      irq;              //使用的中断  
17.	void     *controller_state;  
18.	void     *controller_data;  
19.	char     modalias[32];    //名字  
20.	};    

1.	struct bus_type spi_bus_type = {     
2.	   .name       = "spi",  
3.	   .dev_attrs  = spi_dev_attrs,  
4.	   .match    = spi_match_device,  
5.	   .uevent   = spi_uevent,   
6.	   .suspend  = spi_suspend,  
7.	   .resume   = spi_resume,  
8.	};   
9.	static struct class spi_master_class = {     
10.	    .name             = "spi_master",   
11.	    .owner           = THIS_MODULE,  
12.	    .dev_release    = spi_master_release,  
13.	};    

spi_bus_type对应spi中的spi bus总线

spi.c代码的功能作用：
	这里注册了一个spi_bus_type，也就是一个spi总线，和一个spi_master的class。分别对应上图中sys/bus/下的spi目录和sys/class/下的spi_master目录。
具体示例代码
	1.	static int __init spi_init(void)  
2.	{  
3.	    int status;  
4.	    buf = kmalloc(SPI_BUFSIZ, GFP_KERNEL);  
5.	    if (!buf) {  
6.	        status = -ENOMEM;  
7.	        goto err0;  
8.	    }  
9.	    status = bus_register(&spi_bus_type);  
10.	    if (status < 0)  
11.	        goto err1;  
12.	    status = class_register(&spi_master_class);  
13.	    if (status < 0)  
14.	        goto err2;  
15.	    return 0;  
16.	err2:  
17.	    bus_unregister(&spi_bus_type);  
18.	err1:  
19.	    kfree(buf);  
20.	    buf = NULL;  
21.	err0:  
22.	    return status;  
23.	}  
24.	postcore_initcall(spi_init);  

我们利用板级信息添加一个设备的时候，该driver如果匹配到这个设备，那么就会自动为其创建设备节点，封装spidev_data

信息，并且挂到全局设备链表device_list。


config SPI_TLE62X0
        tristate "Infineon TLE62X0 (for power switching)"
        depends on SYSFS
        help
          SPI driver for Infineon TLE62X0 series line driver chips,
          such as the TLE6220, TLE6230 and TLE6240.  This provides a
          sysfs interface, with each line presented as a kind of GPIO
          exposing both switch control and diagnostic feedback.

config SPI_SPIDEV
        tristate "User mode SPI device driver support"
        depends on EXPERIMENTAL
        help
          This supports user mode SPI protocol drivers.

          Note that this application programming interface is EXPERIMENTAL
          and hence SUBJECT TO CHANGE WITHOUT NOTICE while it stabilizes.

config SPI_SUNXI
   tristate "SUNXI SPI Controller"
   depends on ARCH_SUNXI
   help
       Allwinner Soc SPI controller, present on SUNXI chips.



