回顾
    共享库创建: gcc -fpic - shared xxx.c yyy.c -o libxxx.so
          使用：gcc main.c -lxxx -L.
        运行a.out 指定xxx所在的目录，使系统知道去哪加载
              LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./
    C语言出错处理： 一个变量errno
                    三个函数 strerror perror printf("%m")
    环境变量和环境表：
          fopen("/etc/passwd", "r+") 
          传递给当前进程a.out一个环境变量， USER
					getenv:返回环境变量的值
					setenv：设置环境变量的值,当指定的环境变量存在
									可改可不改
					unsetenv：删除一个环境变量
					clearenv：删除全部环境变量
					putenv：设置环境变量的值，必改	
			env2.c	
---------------------------------------------------------
1、内存管理
   如何使用linux内核现有的机制，来完成自身的编程工作
  1.1 基本概念
     linux/unix采用虚拟内存管理技术，使得每个进程都拥有独立的3G（虚拟）地址空间，用户看到和接触到的都是虚拟地址，无法直接使用物理地址编程。优点：
     1）起到保护操作系统的作用	
     2）用户程序可以使用比实际物理内存更大的空间
    物理地址 / 虚拟地址（线性地址）/ 逻辑地址 
    linux内核将4G空间划分为两部分----用户空间和内核空间
    用户空间从0x00000000~0xBFFFFFFF (3G)
    内核空间从0xC0000000~0xFFFFFFFF (1G)
    
    linux内核内存管理（映射）的基本单位是页（page）, 通常一页为4096字节， getpagesize()返回一页的大小
  1.2进程的地址空间
  	什么是进程？与程序的区别？
  	答: 1) 程序是保存在磁盘上的可执行文件
  		  2）运行程序时需要将可执行文件加载到内存，形成进程  
        3）一个程序（文件）可以同时存在多个对应的进程
     
    maps.c
    补充：ps，察看进程
             -aux 列出所有进程	
          通过以上命令可以察看到a.out对应进程的PID
        cat /proc/PID/maps	  
    总结：进程在内存空间中的布局，从低地址到高地址依次为：
    1）代码段(text):可执行指令，字面常量（"abcdef"）
                    具有常量属性的全局变量
                    r+x属性，若写操作会发生段错误
    2）数据段（data）:初始化不为0的全局变量和静态局部变量
    								r + w 
    3)BSS段 （bss）:未初始化或者初始化为0的全局变量和静态局部变量。进程一经加载该段被清为0  r + w   
    4)堆区 （heap）:动态分配内存  r + w
                     malloc(16),该16个字节中的初始内容不确定，在使用该区域时应该自己编程完成初始化工作
    5）栈区（ stack）:非静态局部变量，函数的参数和返回值
              int a; a的初始化值不确定，自己编程完成初始化工作。 
    【补充】：C编程字符串使用总结
         字符串表现形式有三种：
                  字面常量 ”abcdef“
                  字符指针  char *str;
                  字符数组  char str[];
         string.c
	1.3 内存管理的相关函数
		 STL   -》》allocator 内存分配回收全自动管理
				C++ -》 new delete 两个运算符
				    C--》》malloc free
				           calloc
				           realloc
				        linux ---》 (s)brk / mmap
       -------------------------------------------
       linux 内核中 kmalloc /vmalloc /get_free_page
   malloc的特点
       1）进程中通过malloc首次分配内存时，至少映射33页。
          即使通过free函数释放掉全部内存，最初33页仍保留
       2） malloc函数分配内存时会附加若干字节（12字节），用于存放控制信息。这些控制信息一旦被破坏，可能导致后续操作异常。  
      malloc正常使用即可，不要出现越界访问 。
	1.3.1 brk/sbrk
			brk()/sbrk()系统的底层维护了一个位置指针，通过指针的移动完成内存的分配和回收。
			brk()既能分配内存也能回收
			sbrk()既能分配内存也能回收内存
			在开发时，一般使用sbrk()分配内存，用brk()回收内存
		  void *sbrk(int increment)	
		        increment:为正数时，是分配内存
		                  为负数时，是释放内存
		                  为0时， 取当前的位置指针值
		         其返回值分配新内存前的初始位置
		  int brk(void *end_data_segment)
		      成功返回0 失败返回-1
		  brk.c
		  特点： 做映射（分配）内存时以页为单位，
		        若发现页耗尽时自动追加映射（分配）
		        若发现页空闲时自动取消映射
		  内存资源稀缺时可考虑使用brk/sbrk分配内存
		 练习：用brk 回收内存
		       用sbrk分配内存的方式来实现一个int,一个double
		       一个字符串的存储，并做打印
		   brk2.c
		1.3.2 mmap            
 
static 作用？
	修饰全局变量，使该全局变量只在本模块（.c）可见
	修饰局部变量，存在于数据段，是在程序执行过程中一直有效
	修饰函数，使该函数只在本模块(.c)中可见

const 作用？         
     定义常量类型变量，对应的值不能修改。 
    1）修饰局部变量 和全局变量   
     const char *p ;   //*p的内容不能改
     char  * const p; //p的内容不能改
     const char * const p;// p *p 的内容都不能改
   2)修饰函数的参数
      strcpy(char *str1, const char *str2)
      {
      		*str2 = 'a';
      }
      便于编译器进行类型检查，提高程序的可读性和健壮性
volatile
                     
                    
                    
         
        
         
     
     
     		
					
					
					
					
					
					
					
					
					
					
					
						








          
          



