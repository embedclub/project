回顾：
    文件操作函数
    1、open
    2、close
    3  write
    4  read
    5  lseek
    linux下几乎一切皆文件
    open的返回值，int 类型的文件描述符 fd，而不是FILE *fp
    open过程中的 文件描述符表 文件表  inode
----------------------------------------------------------
文件IO（续）
    1、dup / dup2
       复制一个现有的文件描述符时，不会复制文件表。出现
       多个文件描述符对应同一张文件表的情况。
       dup()复制时系统会自动选择一个未使用的文件描述符，通常选择未使用的最小值。
       dup2()是程序员指定新的描述符，如果指定的值已经被使用，会强行关闭原文件后继续为我所有。
       dup.c
       它们经常用来重定向进程的stdin stdout stderr
       dup2.c
    2、fcntl
    	#include <fcntl.h>
    	int fcntl(int fd, int cmd)
    	int fcntl(int fd, int cmd,  long arg)  
    	可以改变已打开文件的性质。提供5种控制文件的功能：
    	2.1 复制一个现有的文件描述符 （F_DUPFD）
    		复制文件描述符，需要第3个参数作为新的文件描述符值，
    		如果该值已经被使用，寻找大于该值且未被使用的最小值代替。
    		dup3.c
    
    	2.2 获得/设置文件描述符标记（F_GETFD F_SETFD）
			2.3 获得/设置文件状态 （F_GETFL F_SETFL）
			2.4 获得/设置异步I/O所有权（...） 
				   /*重点*/
			2.5 获得/设置记录锁（F_GETLK F_SETLK F_SETLKW）
			    对于多进程同时操作一个文件，引入了锁机制。
		文件锁机制解决的是多进程同时操作同一个文件产生数据冲突的问题。同一个进程内部文件锁无效。
		文件锁允许多个进程同时读，不允许同时写，也不允许多进程同时读写。因此文件锁分为读锁和写锁。
		读锁针对读操作，效果允许其他进程继续给该文件加读锁执行读操作，但不允许给该文件加写锁执行写操作。
		写锁针对写操作，效果不允许其他进程继续给该文件加读锁或者写锁进行读或者写操作。
		文件锁的使用包括一个函数 +  一个数据结构
		函数: fcntl(fd, )
		数据结构：
			struct flock		
			{
					short l_type;//锁的类型
											//F_RDLCK/F_WRLCK/F_UNLCK
					//可以锁文件的一部分
					l_whence; //SEEK_SET SEEK_CUR SEEK_END
					l_start;//锁区偏移，从l_whence开始偏移l_start字节
					l_len;//锁区的长度
					l_pid;//上锁的进程					
			}
			fcntl(fd, cmd, arg)
				cmd取值：
					 F_SETLK: 设置锁定状态为lock.l_type，加/解锁
					 F_SETLKW: wait,如果加锁不成功则一直等待，
					            加锁不成功fcntl()不会返回
				   F_GETLK: 测试是否可以加锁
				      
	文件锁的特点：
	    1）可以加锁整个文件，也可以加锁文件的一部分
	       lock1.c: a.txt 10~30 加读锁
	       lock2.c: a.txt 0~20 	加读锁（成功）
	                      20~30 加写锁（失败）		      
			2）上锁的方式有两种，一种是F_SETLK,加锁失败立即返回-1.	 F_SETLKW,加锁不成功不返回 
			    lock3.c
			3) 文件锁其实并不能锁定读写函数，只能组织其它进程的加锁行为，导致其他进程加不上锁。因此文件锁的正确用法是：在调用read之前加读锁，在调用write之前加写锁，读写完毕后立刻释放锁。在加锁之前可以先获取一下文件锁的状态，预测是否可以加锁成功 F_GETLK
			    lock4.c: 尝试a.txt 0,20 是否可以加读锁
			                       20，50是否可以加写锁     
				      
			4）同一个进程内部文件锁无效
			   lock5.c	      
			5) 进程退出时，属于该进程的所有锁均被释放
			6）建议性锁，而非强制性锁
		3 stat函数
		 获取硬盘上文件的属性信息	
		   ls -il
		 struct stat
		 {
		 		st_ino; //i节点号
		 		st_mode; //权限 文件类型信息
		 		st_size;//文件大小（Byte）
		 		...
		 }
	  4 删除文件
	    标C ： remove(filename)
			UC  ： unlink
			     删除文件，要删除的文件正在被某个进程打开并使用，
			     其内容直到该文件被关闭后才会真正删除。
			     unlink1.c
			     unlink2.c
		  在实际项目中通常会使用一些临时文件时，当使用者打开了该文件就可以使用unlink()来删除动作。
		  5、其他函数
		     access
		     umask	
		     chmod
		     chown
		     truncate
		     create  (基本废弃) 
			     
			     
			     
				
			
			
			
				      
				      
				      
				      
					
		   	    
       
    
    
    
    
    



