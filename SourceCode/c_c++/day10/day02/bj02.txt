回顾：
    1.重新认识开发环境
       1.1 unix/linux 发展历程
           POSIX：同一都编程接口规范
           GNU： 自由软件 , 操作系统 应用软件
           GPL： copyleft 
       1.2 gcc 编译工具
          1） 预编译
          2） 编译
          3）汇编
          4）链接 
          前三歩编译阶段，出现的错误为语法错误
          第四歩链接阶段， ld 返回1
          重要参数：
              -c: 只编译不链接
              -o: 指定生成目标文件的名称,其后应该紧跟
                   目标文件名称
              -g: 使目标文件中包含调试信息
              -l: 指定需要使用的库文件名称
              -L: 指定链接程序时搜索库文件的路径
              -E：只做预编译
              -S: 做完编译停止
              -Wall: 产生尽可能多的警告信息
              -v: 输出编译器的版本信息
              -O0/1/2/3：代码优化
     2 重新认识.c .h文件
       什么内容放入.h 文件
       包含.h文件的两种方法
            #include <>
            #include ""
        如果.h 和.c不在一个目录下 ，指定该头文件的路径，
        使用相对路径
        2.1 预处理指令
            struct stu
            {
            		int a;
            		char b;
            		char c;
            		short d;
            		double e;
            };
            sizeof(struct stu)? 对齐 补齐
          经验：如果想让以上结构体出现尽量少的空洞，
               尽量将占据字节较多的变量安排在靠前的位置
         2.2 预定义宏
             __LINE__
             __FUNCTION__
             __FILE__
     3、重新审视a.out
        1) ./a.out ls
           环境变量中的PATH  
        2) printf的实现在哪？
           会使用到共享库libc.so.6 ,printf的实现代码在该库
-----------------------------------------------------------
4、静态库
	静态库就是目标文件的集合，以.a结尾。静态库在程序链接时使用，链接器会将程序中使用到函数的代码从库文件中拷贝到应用程序(a.out)中去。一旦链接完成，在程序执行过程中不再需要该静态库。由于每个使用静态库的应用程序(a.out)都需要从库中拷贝所需要函数的代码，所以使用静态链接的文件会比较大。
	4.1 静态库的创建
	   1）编辑.c .h
	   2) 编译生成目标文件：gcc -c xxx.c -o xxx.o
	                        gcc -c yyy.c -o yyy.o
	   3) 打包成静态库文件：ar -r libxxxxx.a xxx.o yyy.o zz.o
	      ar -r libmath.a  calc.o show.o
	         -r: 将目标文件插入到静态库中，已存在则更新
	4.2 静态库的使用
	   1）直接法
	   		gcc main.c libmath.a
	   2）环境变量法
	      export     LIBRARY_PATH=.:$LIBRARY_PATH
	      (声明定义)  环境变量名称=.:原有值  	 
	      gcc main.c -lmath 
	   3）参数法（推荐）
	      gcc main.c -lmath -L./ 
5、共享库
	在程序链接时并不像静态库那样拷贝使用函数的代码，而只是作些标记。然后在程序启动时，动态地加载所需要的共享库。
所以，应用程序运行时仍然需要共享库的支持。共享库链接出来的a.out要比静态库链接出的a.out 要小。
	5.1共享库的创建
		1） 编辑.c .h
		2) 编译生成目标文件 gcc -c -fpic xxx.c -o xxx.o
		                    gcc -c -fpic yyy.c -o yyy.o
		   gcc -c -fpic calc.c  -o calc.o	
       gcc -c -fpic show.c -o show.o              
	             
    3) 链接生成共享库文件
          gcc -shared xxx.o yyy.o -o libxxx.so
       gcc -shared show.o calc.o -o libmy.so
    也可以将第2步和第3步合并
         gcc -shared show.o calc.o -o libmy.so
  5.2 使用共享库
     1）直接法
	   		gcc main.c libmy.so
	   2）环境变量法
	      export     LIBRARY_PATH=.:$LIBRARY_PATH
	      (声明定义)  环境变量名称=.:原有值  	 
	      gcc main.c -lmy
	   3）参数法（推荐）
	      gcc main.c -lmy -L./ 
	 5.3 运行
	     LD_LIBRARY_PATH:指定共享库加载目录
	     export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH
	     ./a.out
	 总结：
		 静态库占用空间非常大，不易修改但执行效率高
		 共享库占用空间小， 易于修改但执行效率低  
		 需要使用的命令
		     ar
		     nm:可以察看目标文件（.o）, 可执行文件（a.out）,静态库（.a）,共享库文件(.so)中的符号
		     ldd:察看可执行文件，共享库文件的动态依赖
		     objdump: 显示二进制模块的汇编信息
作业一：打印菱形两个函数封装成共享库，main.c 中调用
    选看： 手工加载共享库，并使用共享库中的函数
           dlopen(....): 加载共享库到内存
           dlsym(...): 找到共享库中指定函数在内存中位置  
6、C语言的错误处理
  错误处理解决不了所有的问题，只是在可控范围内，多错误的情况进行编码处理。
  错误处理对于所有的编程语言都是必须的
  C语言通过返回值描述出错原因，根据返回值进行错误处理
6.1 通过返回值表示错误
   1）返回合法值表示成功，返回非法值表示失败
       成功返回正数，一旦返回-1就代表失败
   2） 返回有效指针表示成功，返回空指针表示失败
        malloc
   3） 返回0表示成功， 返回-1表示失败
        main()
   4）永远成功，返回void 
        bzero
	练习： 写4个函数
	     1） 取1~10的随机数，随机到的值为5返回-1
	     2）返回两个整数中的最大值，如果相等出错
	     3） 传入一个字符串，如果是“error”返回错误，
	         否则返回传入的字符串
	     4）换行打印一个传入的字符串     
      error.c 
作业二： fopen 打开文件时使用文本方式或者使用二进制方式
         有何区别？
         在linux/unix这两种打开方式没有任何区别
  6.2 通过errno表示错误原因
     标C中内置了一个全局变量 errno         
                三个函数：strerror/perror/printf
     以上三个函数把错误编号变成错误的具体信息
     strerror(...): 传入一个错误编号，返回对应的错误信息
     perror(...): 打印当前错误信息（自动查找errno对应的错误信息）
     printf("%m"): 打印当前错误信息（自动查找errno对应的错误信息）
     
     errno的值在调用特定库函数时，出错就会改变。
     后续调用库函数没有出错， errno的值不变
     不应该直接使用errno去判断函数是否成功
		errno.c

7、环境变量和环境表 
   问题：对于/etc/passwd文件读写方式打开
         ./a.out 失败
         sudo ./a.out 成功为什么？     
    答：当执行./a.out程序，启动该进程时，系统给该进程一张环境变量表，是一个以NULL指针结尾的字符指针数组。其中记录了哪个用户（权限）来执行的该程序，那么该进程再去执行其他操作时就根据该用户（权限）来判断是否有权这样做 
    env.c
    C语言中，环境变量存在于环境表中。环境表其实就是一个字符指针数组。 	
    extern char **environ  // char * environ[]
    该变量记录了环境表的首地址	
    
    [补充] :   xxx *p;
               p++; // + 1 * sizeof(xxx)      
           char **p	    
	         (char *) *p // p++ // + 1 *sizeof(char *)
           *p + 6  // n 代替*p  char *n 
                   //*p + 6   n+6 // 6* sizeof(char)
     

	
             
            
              
       
           
           
           
           
           
           
           
           
           
