回顾：
     多线程的管理
         线程和进程的区别
         如何创建线程
         		 pthread.h  + pthread库
             pthread_create()
             调用pthread_create（）的线程和新创建的线程哪个先执行不确定
         如何结束线程
             1）线程中主体函数中执行了return
             2) pthread_exit exit
             3) 另外一个线程来取一个线程
              	pthread_cancel
         如何给新创建的线程传递参数
             1）pthread_create(id, 0, func, arg)可以通过arg指定线程主体函数执行时的传入参数    
             2）通过全局变量
          如何获取线程的退出及退出码
							1）线程中通过return 或者 pthread_exit返回值
							   监控线程通过pthread_join()来监控到线程的
							   结束，并且参数void **retval来取得结束线程
							   的退出码
							2）通过全局变量
							3）通过 pthread_create(... arg)
							   中的arg 当线程结束也可以取得结束线程的返回
							   值
			    如何回收结束线程的资源
			    		1）pthread_join, 当该函数返回时，结束线程的资
			    		   源被自动回收
			    		2）pthread_detach, 使线程出来分离状态，
			    		   处于分离状态的线程一旦结束，资源立刻自动回
			    		   收， 处于的分离状态的线程，pthread_join()
			    		   无效
------------------------------------------------------------
线程间的同步
    全部变量i， 开启多个线程同时执行i++
    vie.c   
1、互斥量
	本质上就是一把锁
	编程步骤固定：
	    1）定义一个互斥量
	    	pthread_mutex_t lock;
			2) 初始化互斥量
			  pthread_mutex_init(*mutex, *mutexattr) 
			  使用方式通常为pthread_mutex_init(&lock, 0) ;
			  另一种方式(可忽略)
			      lock = PTHREAD_MUTEX_INITIALIZER;
			3）加锁， 保证只有一个线程执行，其他线程被锁定
					 int pthread_mutex_lock(&lock);
					    设置互斥量为locked状态，如果互斥量当前处于unlocked状态，该函数使互斥量立刻变为locked状态后返回。如果互斥量处于locked状态，会挂起调用者线程直到该互斥量处于unlocked状态。
			4）操作共享数据
			5）解锁
					pthread_mutex_unlock(&lock)
			6) 销毁互斥量
			   pthread_mutex_destroy(&lock)
		加锁的原则： 只用来保护多线程共享的资源，尽量保证多线程的并发
		pthread_mutex_lock和pthread_mutex_unlock成对使用
		死锁：
		     1）一个线程  A 锁  想锁B
		        另一线程  B 锁  想锁A
		     2）一个线程试图对一个互斥量加锁两次
		        pthread_mutex_lock(&lock);
		        pthread_mutex_lock(&lock);
		如何避免死锁：
		     1） 加锁都是按顺序加锁 先A 后B 
		     2） pthread_mutex_trylock : 试图加锁
		         如果已经给A加锁，试图去给B加锁不成功，
		         释放掉A上的锁，过段时间重试
2、信号量
	 POSIX定义，用于线程之间。
	 信号量是一个计数器，可以控制访问共享资源的最大线程数
	 当信号量的初始值为1时，效果等同于互斥量
	 <semaphore.h>
	 信号量的编程步骤：
	 	1） 定义信号量
	 	   sem_t sem;
	 	2) 初始化信号量
	 	    int sem_init(*sem, pshared, value)
             pshared, 必须为0，代表在同一个进程中的多线程之间使用，如果不为0代表多进程中使用（linux暂不支持）	
    3）获取信号量 （计数-1）
    		sem_wait(*sem) //信号量-1， 不够减则阻塞
    		       //计数已经为0 再减则称作不够减
    4）访问共享资源
    5）释放信号量 （计数+1）
				sem_post(*sem)
		6) 销毁信号量
		    sem_destroy(*sem)		
	  练习：修改以上程序，使用信号量来代替互斥量，保证count++
	        动作不被打断			
				sem.c	 
	  练习： 用信号量模拟对数据库的访问线程个数
	       要求，在主线程中开启20个子线程，但是最多同时只允许有10个线程可以去访问数据库（printf sleep）
	       sleep(random)
	     sem2.c
	 
3、条件变量
	条件变量可以让线程在特定的条件下暂停或者解除暂停
	如果进程内部需要多个代码同时执行，可以启动多线程，
	如果多线程需要访问共享数据，可以使用互斥量或者信号量，
	如果需要多线程自动，自动解除暂停，可以条件变量
	注意：条件变量的使用依赖于互斥量，因此必须和互斥量配套使用。
	编程步骤
	 1)定义条件变量  pthread_cond_t cond;
	 2)初始化条件变量
	 		int pthread_cond_init(*cond, *attr);
	 		pthread_cond_init(&cond, 0);
	 3) 暂停线程，使调用线程睡入条件变量cond(对应有一个队列),
	 		同时释放互斥锁mutex
	 		
	    pthread_cond_wait(*cond, *mutex）
	 4） 恢复线程，把线程从条件变量（队列）的取出，恢复成可执行状态去竞争CPU
	    pthread_cond_signal(*cond):从条件变量cond对应的队列中取出一个线程，使该线程可以继续执行。
	 5）销毁条件变量
	    pthread_cond_destroy(*cond).
	
4、读写锁 （unix环境高级编程）
		适合于频繁读，很少写的情况
----------------------------------------------------------
综合案例2 ： 聊天室
     写一个基于TCP的聊天室程序：网络编程 + 多线程
        1）先启动服务器端，永不退出，或者信号退出
           用accept()等待客户端连接
        2）启动客户端， 先输入名称，连接服务器，并把客户端输入的名称发送给服务器
        3）服务端收到客户端连接请求后开启一个新线程与客户端进行交互， 接收客户端的昵称，“欢迎昵称进入聊天室”返回给客户端
        
        以上为第一版本，第二版本：
        把欢迎发送给所有连接上来的客户端，这就需要记录为每个客户端连接通信使用的socket描述符（建议使用数组保存）
        
        当客户端(昵称)向服务器端发送一句话: "大家好"
        服务器将收到的信息转发给所有的客户端“昵称：大家好”
        第三版本：
           如果有一个客户端断开连接，将其对应的socket描述符从数组（链表）中删除
        增加或者删除socket描述符是在两个不同的线程中完成，那该数组（链表）就成为了共享资源，应该得到保护
        
        
        



			    
							                   
             
             
             
             
               
              
              
              
              
