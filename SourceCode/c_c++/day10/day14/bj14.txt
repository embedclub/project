回顾：
     TCP编程模型
     UDP编程模型
----------------------------------------------------------
多线程编程
     网络编程的服务器端需要代码的并行，因为每个客户端都需要服务器的支持。并行的技术就是多进程和多线程。
     多进程有很多的局限性，系统消耗比较大，要分配大量的系统资源，进程ID（内核中有管理该进程的数据结构）等等。网络编程中多线程技术使用越来越广泛，用多线程实现并发成为主流。
     多线程是一种轻量级的代码并行技术，对资源要求比较少。
线程隶属于某个进程，进程内部可以有很多个线程，线程内部还可以创建更多的线程。
		线程共享进程的资源，比如： 代码区 数据区 堆区（注意没有栈区）、环境变量表、命令行参数、文件描述符、信号处理函数等等。每个线程只需要创建一个独立的栈空间。
		同一个进程内部的多个线程之间既相互独立又相互影响。
		每个进程内部都至少有一个线程， 叫主线程（main）,主线程一旦结束，进程随之结束，如果该进程内部有多个线程，随着主线程的结束，其他线程也都结束。
		每个线程内部代码都是顺序执行的，多线程之间代码乱序执行
		对于单核CPU多线程的并行原理：宏观上并行微观上串行
   问题： 线程和进程的区别？
1、linux/unix关于线程的设计和实现
   早期各厂商各自提供私有的线程，接口和实现差异非常大。
   POSIX标准：定义了一个统一的线程编程接口，遵循该标准的线程实现被统称为POSIX线程，即pthread.
   如果要使用pthread需要包含一个头文件pthread.h,和一个接口函数库libpthread.so(系统库目录下)
2、线程的创建
		int pthread_create(phtread_t *id, phtread_attr_t *attr,
												void *(*func)(void *), void *arg )
			id, 用户返回线程的ID，线程ID是线程的唯一标识
			attr,要创建线程的属性信息	，一般情况给0即可（默认）
			func,是一个函数指针，该函数就是新创建线程的执行主体
			arg, 是func的参数，系统在创建完新线程，调用线程的主体函数func时，会将arg作为参数传递给func
			返回值：成功返回0
			        失败返回错误码，需要使用 strerror()转化成相应的错误信息
			      注意多线程时不要再使用errno, perror()
		
		create.c
特点一： 创建新线程后，调用线程和新线程谁先执行不确定
特点二： 如果主线程先结束会导致进程结束，进程结束会导致其它
         线程也结束
3、线程的运行
   3.1 如何获取线程自身的ID
       phtread_t pthread_self(void);
     thread_id.c 
   3.2 给新创建的线程传参
       1)通过全局变量
       2)通过参数arg
     param.c 
   主线程在所有子线程结束后再结束
特点三： 线程共享进程中的资源， 例如全局变量（数据段），堆区 、栈区 代码段... 
    对于资源共享，线程和进程的关系 “你的是我的，我还是我的”
 
4、 线程的结束
    int pthread_join(pthread_t id, void **retval)
        等待id参数所标识的线程结束，该线程结束函数立刻返回，未结束则阻塞等待。
        返回值： 成功返回0
                 失败返回错误编号
     param2.c   
   4.1 线程的返回值问题
     线程结束时返回的void * 应该被谁获取，如何获取？     
     谁来调用pthread_join(id, ....)
     1)可以通过pthred_join(id, retval)中的retval获取到
       线程的返回值  (最常用的获取线程返回值的方式)
     2）把子线程需要返回的数据放到全局变量或缓冲区中
     3) 可以通过创建线程时的传入参数返回
     param3.c
   4.2线程如何结束
      1） 线程执行了return
      2) pthread_exit(void *retval)
          结束线程，并且通过retval 返回值
         与exit()的区别：
         pthread_exit()结束线程，而exit()退出进程。前者只会导致调用线程结束，而后者会进程中的所有线程结束
         exit.c
      3) 线程可被其他线程取消
         pthread_cancel
   4.3  线程资源的回收
       线程的资源： 栈空间 线程的返回值
       1）普通线程的资源何时回收不太确定,没有强制的回收机制
       2) pthread_join()的线程，当该函数返回时，该线程使用到的资源会被自动回收
       3）处于分离状态的线程在结束的同时，该线程的资源会被自动回收，不考虑其他线程是否需要该线程的返回值
       如何是普通线程处于分离状态？
       pthread_detach()
       detach.c
       经验：
       	 处于分离的状态线程，再去它执行pthread_join()无效。
       	 实际编程过程中，创建了新线程，要么对他
       	 pthread_join(),要么pthread_detach().
       	 
什么是进程？
    系统进行资源（代码段 数据段 堆区 环境变量表 PID 文件表。。。）分配的基本单位，具有某个独立功能的程序在某个数据集合上的一次活动。
什么是线程？
    线程是进程的一个实体，是CPU分配和调度的基本单位（重点），它是比进程更小的能独立运行的基本单位。
二者之间的区别：
     1）线程是进程的一部分，也被称作轻量级进程
     2）进程是分配资源的基本单位，线程是CPU调度的基本单位
     3）线程的创建比进程的创建系统开销更小 
作业：
     tcp_server.c 该程序只能同时响应一个客户端，修改使其能够同时响应多个客户端
         socket()
         addr
         bind()
         listen()
         while(1)
         {
         		accpet()
         		pthread_create(, ser_func)
         }	
         		
        ser_func()
        {
        		while(1)
        		{
        			recv()
        			printf()
        		}
        }
        
        
         		
         		
         		
         		
         		
        
     
     
     
           	 
       	 
       	 
       	 
       
       
       
       
       
       
       
       
       
       
   
   
   
   
      
   
   		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
     
     
     
     
     
     
     
