回顾：
      dup/dup2:复制文件描述符，不复制文件表，使得多个文件描述符对应同一个offset
      fcntl:
          1)复制文件描述符
          2）给文件加锁，文件锁一种读锁，一种写锁
              a)用于多进程间
              b)可以加锁文件的一部分
              c)加锁并不是真正去锁住读写函数，而是程序员
              	通过逻辑编程如果加锁不成功，不进行读写动作
              	res = fcntl(fd, F_SETLK, &lock)
              	if(res == -1)
              	{
              		...
              	}
              	else
              	{
              		read/ write
              	}
             d)加锁有两种方式： 	
              	   F_SETLK:成功失败都立即返回
              	   F_SETLKW:加锁成功返回，不成功则等待
             e) 建议性锁
        stat: 功能等价于ls -il命令
              获取文件的属性信息：大小 所有者 inode ...
        unlink: 是标C中remove的部分实现
        			删除文件，如果要删除的文件被某进程所打开，该
        			文件并没有真正删除，打开该文件的进程仍然可以
        			继续使用。当没有进程打开并使用该文件时，该文
        			件会被系统自动删除。
        			通常用于项目中临时的删除。
        			fd = open("a.tmp"...)
							unlink("a.tmp") ;
							read(fd...)
							write(fd...)       			
        chmod / chown/ access...
-----------------------------------------------------------
1、mmap
	映射文件
	 void mmap(void *addr, size, prot, flags, int fd, offset)
	 		当映射文件时，flags取值固定MAP_SHARED
	 mmap只能映射文件中已经存在的字节		
	 		
	 mmap.c
	 优点：将文件映射到内存可以提高数据交互的效率。
	 
	 EOF： end of file, 文件结束标志，实际文件中不存储该信息问题一：uc编程如何确定读到文件的末尾？
	      int count = read(...)
	      如果count = 0 就是文件的末尾
问题二： 文本文件和二进制文件的区别？
				标C： “r”  “rb”
       在unix/linux下没有二进制文件和文本文件之分，统一看作二进制文件。
       在window下：标C文本方式读写 和二进制方式读写的差别仅仅回车换行的处理上。文本方式写入时，每遇到一个"\n"(ox0a)，会将其换成"\r\n"(0x0d 0x0a),然后写入文件。在文本方式读取时，每遇到一个"\r\n",将其替换为"\n",然后送到读缓冲区。
二进制读写时，不存在任何转换。
问题三： write(fd, &i, 4) //i = 100为什么看到的是乱码而不是100，跟文本方式或二进制方式打开文件有关系吗？
     没有任何关系。
      struct_read_write.c
作业一：编程实现atoi  "8000"   8000 
              itoa   8000   "8000"
              strcpy   
  
2、目录操作函数
	mkdir：创建目录
	rmdir：删除目录
	chdir：修改路径
	getcwd : 获取当前所在路径	
	opendir: 打开目录
	readdir: 
	closedir:
	  xxxdir()联合使用，实现读取目录中的内容
	  步骤：
	  		1)opendir
	  		2) readdir ：每次读出一个子项
	  			struct dirent
	  			{
	  					d_type;    //标示文件的类型
	  					d_name[256];//文件的名称
	  			}
	  		3)closedir
	  编程： 读取指定目录下的文件
	        readdir.c 	
	  练习：循环递归打印出指定目录下的所有内容（包括子目录下的内容）	
	    gcc printall.c -g
	    gdb a.out
	    (gdb) l    (列出源码)
	    (gdb) b 40 （40行加断点）
	    (gdb) r (程序全速执行)
	 	  (gdb) s(tep)
	    (gdb) n(ext)
	    (gdb) p(rint) path
作业二： 动态指定需要打印的目录
        ./a.out /home/tarena/1407/
				   int main(int agrc, char **argv)
				通过环境变量指定要打印的目录： POLLDIR
				 1）vi /home/tarena/.bashrc
				    export POLLDIR=/home/tarena/1407
				 2) source /home/tarena/.bashrc
				 3)  修改程序，在程序中获取变量POLLDIR的值
				     该值就是要轮询打印的目录
3、多进程编程
  3.1进程和程序的区别
  3.2察看进程
      1)简单形式 ps
      2）复杂形式
           ps -aux （linux 专用）
              -a:所有用户有控制终端的进程
              -u：以详尽方式列出
              -x: 显示无控制终端的进程（守护进程）
           ps -elf （unix/linux通用）
              -e: 显示所有用户的进程
              -l:  按长格式显示
              -f： 完整格式显示
   3.3为什么要引入多进程？
       随着CPU运算能力的提高，为了提高CPU的使用效率，引入了多进程机制，使得终端用户可以在一台机器同时并行的做N件事。
     宏观上并行，微观上串行。
   3.4 关于父进程和子进程
   	  操作系统中的多进程是有启动次序的。UNIX系统先启动的进程是0进程，0进程再启动1号进程，再由1号进程启动其他进程，其他进程再启动其他进程，直到所有进程都启动。
   	  如果进程a启动 了进程b，a叫做b的父进程，
   	  b叫做a的子进程。
   	  进程用进程号PID来表示。PID是一个非负的整数，PID可以延迟重用。同一时刻保证唯一
   	  如果获取一个进程的PID： getpid()
   	             父进程的PID：getppid()
3.5创建子进程的方法
	1）fork()创建子进程
	2）vfork() + execl()创建子进程
3.5.1 fork()
    fork()是一个非常简单又复杂的函数
   pid_t fork(void);
      返回子进程的PID或者0，失败返回-1
   fork()函数是通过复制父进程的内存空间创建子进程，复制除了代码区域之外的所有区域，代码区父子进程共享。
   1)fork()会创建子进程，子进程从fork（）当前位置开始执行代码，fork()之前的代码父进程执行一次，fork()之后的代码父子进程分别执行一次（2次）。
    fork.c
   2)fork()会返回两次，父进程返回子进程的PID，子进程返回0
      fork1.c 
    
     
   


















             	 	
              	
              	
              	
              	
              	
