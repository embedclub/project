指针可以随时调整它所捆绑的存储区
程序中通常只关系指针捆绑存储区的某个特征，而
    不关心这个存储区的来源

在我们的计算机上任意类型的指针都是4个字节大小

可以在不同类型指针之间进行强制类型转换，转换时
    地址数据不会受影响
通过指针查找捆绑存储区的时候捆绑存储区的类型
    是由指针类型决定的
指针的类型可能和捆绑存储区的类型不一致，这个时候
    通过不同方式使用存储区的类型不同

无类型信息指针用void*来表示，这种指针可以记录
    任意地址数据
这种指针不可以用来直接获得捆绑存储区，必须
    首先强制类型转换成某个特定类型的指针然后
    才可以
无类型指针通常用来记录来源不明而且有多种可能性
    的地址数据
在使用无类型指针的时候通常需要通过其他方式获得
    它的类型，然后强制类型转换后再使用

指针变量可以参与的计算规则有如下几种
指针 + 整数    指针 - 整数    指针 - 指针
指针在进行加减整数计算时整数n会先被转换
    成n个捆绑存储区的大小然后再进行加减计算
指针减指针的结果是一个整数，这个整数代表
    两个指针地址之间所包含的捆绑存储区的个数

一旦把指针和数组中第一个存储区捆绑后就可以使用
    指针替代数组(采用这种方式可以实现指针和
    数组中所有存储区捆绑的效果)

指针和数组的区别
1.指针可以被赋值而数组名称不可以被赋值
2.对指针做sizeof计算结果是4而对数组名称做
    sizeof计算结果是数组中包含的总字节个数
3.对数组名称取地址后的数值和数组名称本身所
    代表的数值是一样的。对指针取地址的结果
    是指针本身存储区的地址，这个地址和指针
    内部记录的地址完全无关。

可以使用指针作为循环变量，让它在循环中依次
    和数组中每个存储区进行捆绑，在循环大括号
    里直接对指针捆绑的存储区进行处理。
采用这种方式也可以对数组中所有存储区进行
   统一的处理

声明指针时可以使用const关键字
1.把const关键字写在数据类型前面
const int *p_num = &num;
    不可以通过这种指针修改捆绑存储区的内容，
    但是可以修改指针本身存储区的内容
2.把const关键字写在指针变量名称前边
int * const p_num = &num;
    不可以对指针本身存储区进行赋值，但是
    可以对指针捆绑存储区进行赋值

使用指针类型的形式参数可以在调用函数和被调用
    函数之间共用一些存储区,只要让指针类型形式
    参数和这些存储区捆绑就可以了

数组作为函数的形式参数时真正的形式参数是一个指针，
    这个指针和数组中第一个存储区进行了捆绑。可以
    通过这个指针找到数组中任何一个存储区。

指针类型的形式参数如果可以加const关键字就一定要
    加上

无类型指针经常被用作函数的形式参数
这种类型的形式参数可以传递任意类型的数据

指针类型返回值如果和数组捆绑就可以把大量数据
    从被调用函数传递给调用函数
不可以把局部变量的地址赋值给指针类型返回值，这
    会导致调用函数使用被调用函数的局部变量，
    违反生命周期原则

C语言中所有文字信息都应该记录在内存中一组
    连续的字符类型存储区里
在最后一个有效字符的后面必须记录字符'\0',
    这个字符的ASCII码就是0
包含'\0'字符的一组连续的字符类型存储区叫做
    一个字符串，其中'\0'字符前的字符是有效字符

所有字符串一定可以使用一个char*指针表示（这个
    指针应该和第一个有效字符存储区捆绑）

字符串字面值是一种字符串，例如"abc",'+*$'
编译器会把字符串字面值替换成第一个字符存储区
    的地址
编译器会自动在最后加上'\0'字符
字符串字面值被放在一个专门的段落里，这个段落的
    内容在程序运行的时候不可以被修改
同样内容的字符串字面值在计算机里永远只有一份
并列的两个字符串字面值会被合并成一个

字符类型数组也可以用来表示字符串
如果希望把一个字符数组当字符串使用就需要在
    程序中保证字符数组中包含'\0'字符
可以使用字符串字面值对字符数组进行初始化，这时
    编译器会把'\0'字符初始化到字符数组中
用字符串字面值对字符数组初始化之后他们各自占据
    自己的存储区，互相之间没有关系
字符数组是可以修改的

不可以使用操作符对字符串进行操作
为了对字符串进行操作需要使用一组标准函数，
    为了使用这组标准函数需要包含string.h
    文件
strlen        用来计算字符串中有效字符的个数
strcat        把一个字符串中所有字符链接到另外
              一个字符串的末尾
              这个函数用返回值表示合并后的字符串
              这个函数会修改一个原有字符串
              如果事先没有提供足够多的存储区则
              这个函数有可能造成越界
strncat       这个函数的功能和strcat类似
              这个函数比strcat多了一个参数，
              这个参数可以避免出现越界问题

预习：
    1.字符串
    2.字符指针数组而二级指针

作业：
    1.编写函数把一个数组中所有存储区的内容
       前后颠倒
         （使用指针实现）
    2.编写函数把一个数组中所有数字追加到另外
         一个数组的末尾。用返回值表示合并后
         的数组。
          （用指针实现）







