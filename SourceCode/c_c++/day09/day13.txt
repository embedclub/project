文件位置指针用来记录下次文件操作的开始位置
位置指针是一个整数，用来记录文件开头到这个
     位置之间所包含的字节个数
每当完成对文件的读写操作，位置指针会自动向
    后移动

可以使用函数修改位置指针的位置

ftell函数可以获得当前位置指针的位置
这个函数需要文件指针作为参数，它的返回值就是
    位置指针的位置

rewind函数可以把位置指针调整到文件开头
这个函数需要文件指针作为参数

fseek函数可以把文件位置指针调整到文件中任何
    位置
这个函数中可以采用三种办法指定调整后的位置
这些方法的区别在于基准位置不同
SEEK_SET     0       文件头作为基准位置
SEEK_CUR     1       当前位置作为基准位置
SEEK_END     2       文件尾作为基准位置
只需要指定目标位置到某个基准位置的距离就可以了，
    如果目标位置在前则距离是负，否则距离是正

#define是一个预处理指令
这个预处理指令可以用来给数字起名字

使用这个预处理指令起的名字叫宏
编写define预处理指令的时候一定要把名字写在前边，
    数字写在后边
宏名称中间不可以有空格
define预处理指令里不能使用赋值操作符，也不能以；
    作为结尾
编译器直接把程序中的宏名称替换成对应的数字

变量和宏不一样，变量可以代表不同数字而宏永远
    只能代表一个固定数字
宏所代表的数字可以在编译命令中指定,使用-D的
    选项指定宏代表的数字

宏还可以用来给计算公式起名字
计算公式中必须包含未知数字
这个时候可以给宏增加参数，用宏的参数表示这些
    计算公式中的未知数字

宏的参数不仅仅只能用来代表数字还可以用来代表
    别的东西，所以宏的参数没有类型
带参数的宏在处理的时候采用两次替换的方式

函数可以有自己私有的变量而宏不可以

如果希望把一个宏当作数字使用则这个宏必须编写
    成一个表达式
宏内部的表达式无法保证优先计算宏里面的操作符，
    编写宏的时候需要在表达式外加一对小括号

宏没有形式参数所以无法保证优先计算实际参数的
    数值。编写宏的时候应该在所有代表数字的
    参数外加小括号
宏内部可以直接修改参数所代表的变量，这种修改
    在宏结束之后会被保留

不要把自增或自减的计算结果作为宏的参数使用，
    如果宏内部多次使用这个参数则自增或自减
    计算会进行多次

宏操作符包括#和##
这两个操作符都可以用来对不代表数字的参数
    进行操作
#操作符可以把一个宏的参数转换成字符串字面值
##操作符可以把一个代表名称的操作符和其他内容
    合并得到一个新的名称

使用条件编译语句可以在编译时决定编译结果中
    都包含哪些功能
使用如下一组预处理指令可以在编译时根据一个
    宏是否曾经被定义过从两组功能中选择一组
    来编译
#ifdef/#ifndef...#else...#endif
前两个预处理指令是二选一的关系
#ifdef预处理指令后面要跟着一个宏名称，如果
    这个宏已经被定义了则编译前一组语句，否则
    编译后一组语句
#ifndef使用方法和#ifdef类型，只不过意思相反。
    如果宏没有被定义则编译前一组语句，否则编译
    后一组语句

预习：
    1.条件编译
    2.多文件编程
    3.结构体

作业：
    1.编写一个宏根据一个十六进制数位（用字符表示，
        包含'0'--'9','a'--'f','A'--'F'）
        计算出对应的十进制数字，在函数中把转换
        结果打印在屏幕上。
    2.编写一个点菜程序，这个程序需要能编译
        出两个不同的版本。
        第一个版本什么菜都没有，小鸡炖蘑菇是真没有
        第二个版本什么菜都有，小鸡炖蘑菇没有
        (用户点菜时用数字表示菜，0是龙虾，1是
         小鸡炖蘑)





