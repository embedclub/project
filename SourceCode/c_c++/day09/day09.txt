在C语言中可以对程序进行分组管理
C语言程序中的语句可以分成多个语句组，每个语句组
    叫做一个函数
任何一个C语言程序一定是由一个或者多个函数构成的
绝大多数语句必须被放在一个函数里
每个函数有自己的名字，通过这个名字区分不同的函数
任何一个C语言程序中必须包含一个叫做main的函数，
    这个函数叫主函数
不同函数之间通过函数调用建立起联系
函数之间的调用有时间范围的，在某个时刻发生
    在另外一个时刻结束
任何函数调用一定发生在两个函数之间
在函数调用发生之前就已经工作的函数叫调用函数，
    在函数调用发生之后才开始工作的函数叫
    被调用函数

变量存储区是有主人的，主人存在的时间范围内
    存储区才是可以使用的
函数的某一次运行过程可以作为存储区的主人，
    如果一个函数被多次调用则每次执行过程中
    使用的存储区都是不同的。
一个主人要想使用其他主人的存储区需要特殊处理，
    甚至可能是做不到的

在绝大多数情况下两个函数之间的调用一定会伴随
    这数据的传递
数据传递有两个完全相反的方向，一个方向是从调用
    函数向被调用函数传递，另外一个方向就是从被
    调用函数向调用函数传递
无论哪个方向的数据传递都需要被调用函数做一些
    专门的处理
被调用函数需要为每个方向的数据传递准备一组专门
    的存储区

为了把数据从被调用函数传递给调用函数需要一个
    专门的存储区(这个存储区是由被调用函数提供
    的)
被调用函数向这个存储区里放一个数字，当函数
    完成后调用函数可以从这个存储区里获得数字
使用这个存储区所传递的数据叫做被调用函数的
    返回值
被调用函数在最后一条语句中使用return关键字
    才能把返回值放在这个存储区里
调用函数把函数调用语句当数字使用就可以从
    这个存储区里获得返回值
编写函数时需要在函数名称前编写返回值存储区的
    类型,如果函数没有提供返回值存储区则用
    void表示这个存储区的类型。
因为返回值存储区只有一个，所以只能传递一个数字

如果编写函数的时候没有在函数名称前写数据类型
    名称则计算机默认函数使用了一个整数类型的
    返回值存储区

如果没有使用return关键字向返回值存储区里放
    数字则这个存储区里的数字是随机的

如果返回值存储区和返回值数字的类型不一致则可能
    导致数据丢失

exit标准函数可以随时终止程序的执行
需要包含stdlib.h文件

为了把数据从调用函数传递给被调用函数，被调用
    函数必须提供一组存储区用来记录这些数字。
被调用函数中使用一组变量表示这些存储区，这些
    变量叫做形式参数
形式参数变量必须声明在函数名称后面的小括号
   里面。这个小括号里面的内容叫形式参数列表。
形式参数的个数没有限制
如果多个形式参数的类型一样则声明他们的时候必须
    为每个形式参数单独编写类型名称

函数调用语句的小括号里需要提供一组数字，这些
    数字被自动赋值到对应位置的形式参数中
这些数字叫做实际参数

函数执行过程中可以修改形式参数的内容，但是这种
    修改不会影响对应的实际参数

空的形式参数列表表示函数可以有任意多个任意
    类型的形式参数
用void代表形式参数列表表示函数没有任何形式参数

使用数组作为形式参数可以传递大量数据
使用数组作为函数形式参数的时候，形式参数和
    实际参数是同一个数组(如果函数中修改了
    形式参数中的内容则实际参数数组的内容
    也随着改变)
数组名称可以作为和数组形参配合使用的实际参数
数组形参的声明中可以省略存储区个数(需要使用
    一个专门的形式参数表示数组中的存储区个数)

普通类型形式参数只能把数据从调用函数传递到
    被调用函数，这种形式参数叫做输入参数
数组形式参数可以实现双向数据传递，所以这种
    形式参数叫输入输出参数

一个函数可以分成函数体（大括号里的部分）和
    函数声明（大括号前面的部分）
函数声明可以单独写成一条语句，这个时候可以
    省略所有形式参数的名称

如果被调用函数写在调用函数后面则编译器会采用
    函数的隐式声明，隐式声明认为函数有一个
    整数类型的返回值存储区，函数可以接受任意
    个数任意类型的参数。
如果函数的真实声明和隐式不一致则编译的时候会
    出错
在文件开头把所有函数的声明单独列出来叫函数
    的显式声明，这样可以避免隐式声明带来的
    问题

函数内部会调用自己的函数叫做递归函数
如果某一次递归函数的执行过程可以结束则所有
    递归函数就都可以结束了

如果一个问题本身非常复杂，无法直接解决。这个
    问题又可以分解成几个小问题，其中至少一个
    小问题和这个问题本质上一样，只是简单
    一点。这种问题就可以考虑采用递归方式
    解决。

递归函数编写原则
1.用语句描述出问题的分解方式(这时可以假设递归
    函数已经编写完成，可以直接使用)
2.在递归函数的前面编写一个分支处理最简单，不
    需要分解的情况(这个分支必须保证函数可以
    结束)

预习：
    1.递归函数
    2.变量的生命周期和作用域
    3.程序分段
    4.声明变量时可以使用的关键字

作业：
    1.编写函数打印如下内容
      1 X 9 = 9
      ...
      5 X 5 = 25
      每行使用一个函数调用打印
      函数的数量越少越好
    2.编写函数判断一个数字是不是素数
    3.编写函数把一个数组中所有存储区的内容
        前后颠倒




