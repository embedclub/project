假设有如下for语句
for (1;2;3) {
    4
}
以上语句按照如下分组方式执行
[1,2][4,3,2][4,3,2]...[4,3,2]
以上分组中只有第一组和其他组都不一样
正常情况下for循环在两组之间结束
如果一组中编号为2的语句结果是真则启动下一组，否则
    结束循环
当一个循环正常结束的时候编号为2的逻辑表达式
    结果一定是假（循环变量所代表的数字已经超过
    范围了）
使用break语句结束时循环变量所代表的数值一定在
    范围内

循环嵌套结构可以解决复杂的循环问题
可以首先把问题分组，为每组找到一个代表数字，然后
    使用一个循环描述组代表数字的变化过程
在这个循环的内部再使用另外一个循环解决某一组里
    的所有工作
两个循环各自使用自己的循环变量
内循环变量的开始数字和结束数字很可能需要根据
    外循环的循环变量计算得到

for循环的其他编写方法
1.如果循环的大括号里只有一条语句则可以省略
     大括号
2.可以在小括号里使用，操作符链接多个无关语句
3.在循环的小括号里临时定义循环变量(只有c99
    规范才支持)
4.在小括号中省略前后两条语句，只保留中间的
    逻辑表达式
5.如果循环的大括号里什么都没有可以省略大括号
     并且在小括号的后面用;结束掉
6.可以省略循环小括号中间的逻辑表达式，这时
     计算机认为这个逻辑表达式的结果永远是
     真。这种循环无法正常结束，叫做死循环。

while关键字也可以用来编写循环
如果编写循环的时候不知道循环要执行多少次就可以
    考虑使用while关键字编写
for循环和while循环完全可以互相替代，在不同的时候
    采用不同写法的难度不同
优先选择for循环
while循环格式如下
while (逻辑表达式) {
    反复执行的语句
}
大括号内部的语句会反复不停执行，直到逻辑表达式
    结果为假

假设有如下while语句
while (1) {
    2
}
它按照如下分组方式执行
[1][2,1][2,1]...[2,1]
第一组和其他组都不一样
每组最后一步都是编号为1的逻辑表达式，如果某一组
    最后的逻辑表达式计算结果是真则启动下一组，否则
    结束循环

不论for循环还是while循环都有可能完全不执行
    大括号里面的语句

while语句同样可以实现空语句和死循环
while关键字编写死循环的时候需要提供一个结果永远
    为真的逻辑表达式

while循环中也可以使用break和continue语句

do...while语句也可以实现循环，这种循环中
    大括号里面的语句至少会执行一次
语句格式如下
do {
    反复执行的语句
} while (逻辑表达式);

假设有如下语句
do {
    2
} while (1);
它按照如下分组方式执行
[2,1][2,1]...[2,1]
相当于丢掉while循环中的第一组

goto也是一个流程控制语句
它可以任意指定下一条语句的位置
不要使用goto语句

可以在程序中在内存里开辟一组连续的同类型存储区，
    每个存储区可以用来记录一个数字
数组可以用来代表一组连续的同类型存储区
数组中包含三个要素：单个存储区的类型，数组名称和
    单个存储区的个数
数组必须先声明然后才能使用
一旦数组存在了则它里面包含的存储区个数不可改变
绝大多数情况下数组不可以作为整体使用，一次只能
    使用其中的一个存储区
数组中每个存储区有一个编号（下标）。最前边存储区
    的下标是0，向后依次递增。
不可以使用超过范围的下标
数组名称代表数组中第一个存储区的地址，数组名称
    加下标可以得到下标对应存储区的地址

如果要依次对数组中多个存储区进行类似的处理就可以
    编写一个for循环。在循环中让循环变量依次代表
    每个要处理存储区的下标，在大括号里用循环变量
    做下标找到数组中对应的存储区然后进行处理。

数组也需要初始化
1.初始化数组的时候需要提供多个初始化数据，
    把他们都包含在一对大括号里，不同数据之间
    使用逗号分开
2.所有初始化数据按照从前向后的顺序使用（前边的
    数据初始化下标小的存储区）
3.如果初始化数据个数超过存储区个数则多余的数据
    被丢掉
4.如果初始化数据个数少于存储区个数则后面的
    存储区自动被初始化成0
5.如果初始化数据的个数和存储区个数一样则可以省略
    存储区的个数

数组名称代表了一个地址数据，这个地址就是数组
    中第一个存储区的地址
数组名称不代表存储区，所以不可以被赋值

对数组名称进行sizeof计算得到的结果是整个数组
    中包含的字节个数

c99规范中允许声明数组的时候使用变量表示存储区
    个数
这个数组中包含的存储区个数在编写程序的时候不
    知道，只有当程序运行后才能确定
这种数组叫做变长数组
这种数组中存储区个数也是不可改变的
变长数组不可以初始化

程序中使用的无法预知的数字叫随机数
计算机中产生的随机数叫伪随机数

rand标准函数可以用来获得一个随机数
为了使用这个标准函数需要包含stdlib.h文件
把函数调用语句直接当数字使用就得到了随机数

srand标准函数可以用来设置随机数种子（种苹果
    树）
为了使用这个标准函数也需要包含stdlib.h文件
这个函数调用语句的小括号里需要提供一个整数，
    这个整数作为随机数种子使用。不同的整数
    种出来的树不一样，因此得到的随机数也
    不一样

time标准函数可以获得当前时间（0时区从1970年1月
    1号0时0分0秒到现在所经过的秒数）
为了使用这个标准函数需要包含time.h文件
直接把函数调用语句当数字使用就是得到的时间
time函数调用语句的小括号里应该写一个0

在任何程序中srand标准函数应该只执行一次

预习：
    1.二维数组

作业：
    1.编写一个猜数游戏
        程序中获得一个0到99之间的随机数，让用户
         在键盘上输入数字猜。每次猜完以后要给出
         相应的提示。直到猜对程序结束。
    2.从键盘得到一个不超过5个数位的数字，
         把它的所有数位按顺序从前到后依次
         打印在屏幕上
    3.编写程序生成一张彩票，彩票中包含7个
         1到36之间的随机数（允许出现重复
         数字）。最后把彩票中的所有数字
         打印在屏幕上。






