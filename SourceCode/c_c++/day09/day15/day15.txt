一个结构体变量所占有的字节在内存中一定是连续的

内存中为存储区分配字节的时候要遵守字节对齐的
    规则（最小地址必须是存储区大小的整数倍,
    double类型存储区的地址只需要是4的整数倍
    就可以了）
一个存储区如果被包含在一个结构体存储区里面
    则也需要遵守数据对齐的规则

结构体存储区的大小一定是它内部所包含的占地最大
    基本类型存储区大小的整数倍(double类型大小
    按4计算)，这个规则叫做数据补齐。

数据对齐可能造成结构体内部各部分之间有空隙，数据
    补齐可能造成结构体最后出现浪费字节

枚举也可以用来声明新的数据类型，这种新的数据类型
    中包含有限个不同的数字
声明枚举类型时需要使用enum关键字
计算机内部为枚举类型中的每个名字指定一个整数，
    计算机内部就用这个整数代表这个名字。第一个名字
    指定的整数是0，向后依次递增。
可以在声明枚举类型时为某个名字指定对应的整数，
    这个名字后面的所有名字对应的整数都会受影响。
可以使用typedef关键字给枚举类型起别名
可以把起别名的语句和枚举类型声明语句合并在一起

联合也可以用来声明新的数据类型
声明联合的时候需要使用union关键字
联合的声明语句和结构体声明语句的区别仅仅是
    关键字不一样
联合里各个部分的首地址一定是一样的，各部分所
    占据的内存是互相重叠的。联合里一个部分被
    修改则其他部分一定会受影响。
可以使用typedef给联合起别名
可以把联合的声明语句和起别名语句合并

动态分配存储区可以在程序运行的时候临时决定
    需要的存储区个数，并且可以在程序运行
    过程中调整存储区的个数
为了管理动态分配的存储区需要使用一组专门的
    函数
为了使用这些函数需要包含stdlib.h文件

malloc标准函数可以分配指定个数的字节，它的参数
    表示字节个数，返回值表示分配好的第一个字节
    的地址
这个函数的返回值类型是void*，必须首先把他转换
    成有类型指针然后才能使用
如果内存分配失败则返回值是NULL，可以根据返回值
    的数值确定函数是否成功

free标准函数用来把动态分配的存储区还给操作
    系统(这个操作叫做释放内存)
必须在程序结束之前把所有动态分配的存储区都
    释放掉，否则会造成内存泄露
把动态分配得到的内存中第一个字节的地址作为
    参数调用free函数就可以释放这些内存了
某一次分配得到的所有字节必须一次都释放掉
一段动态分配的内存只能释放一次

调用函数可以使用被调用函数动态分配的存储区
使用指针类型返回值或者二级指针形式参数都可以
    把被调用函数动态分配的存储区传递给调用
    函数

预习：
    1.函数指针
    2.C语言标准函数

作业：
    1.编写一个字符串拷贝函数，把拷贝得到的
        新字符串记录在动态分配的存储区里。
        使用返回值和二级指针形参表示新字符串。











