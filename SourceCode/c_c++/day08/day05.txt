采用前面介绍的方法不仅仅可以根据正数的补码计算
    出相反负数的补码，同样也可以根据负数的补码
    计算出相反正数的补码

有符号类型的二进制补码最左边的数位表示数字的符号，
    如果是0表示非负数，如果是1表示负数
这个二进制数位叫做符号位
符号位不仅仅用来表示正负号，所以不能直接替换
    成正负号
无符号类型数据没有符号位

当把一个占地大的整数数据赋值给一个占地小的整数
    类型存储区的时候会保持二进制内容不变（因为
    会丢失一些二进制数位所以十进制表示的结果
    可能发生很大变化）
当把一个占地小的有符号类型整数赋值给一个占地
    大的有符号类型存储区时扩展出来的所有二进制
    数位内容都是符号位（这样可以保证数字的
    十进制内容不变）


,可以作为操作符使用
这个操作符可以把两个无关的表达式合并成一个
    单一的语句
合并后的语句可以作为数字使用，这个数字就是
    ,后边那个表达式的计算结果
,操作符的优先级非常低（甚至比赋值操作符的优先级
    还低）

赋值操作符（=）可以用来改变存储区的内容
赋值操作符左边必须是左值（能够代表存储区的
    东西）
赋值操作符的右边必须可以当数字使用
赋值操作符的优先级比大多数操作符都要低
赋值语句可以当作数字使用，这个数字就是赋值
    完成后左边存储区里面的数字
一条语句中可以使用多个赋值操作符，这个时候
    会优先计算右边的操作符，然后计算左边的
    操作符

需要一个数字配合使用的操作符叫单目操作符
需要两个数字配合使用的操作符叫双目操作符
需要三个数字配合使用的操作符叫三目操作符

绝大多数双目操作符都可以和赋值操作符合并
    形成复合赋值操作符，例如+=,*=
复合赋值操作符可以把计算结果记录在参与计算
    的一个存储区里
复合赋值操作符要求左边是一个能代表存储区的
    内容，右边是一个可以代表数字的内容
复合赋值操作符的优先级和赋值操作符的优先级
    一样低

自增(++)和自减（--）操作符可以把一个存储区里
    的内容做加一或减一操作
这两个操作符必须和存储区配合使用
这两个操作符都是单目操作符
任何一个操作符都有两种使用方法：前操作和后操作
前操作里操作符写在存储区前边，后操作里存储区
    写在操作符前面
前操作表达式作为数字使用时是修改后的数字，后操作
    表达式作为数字使用时是修改前的数字
可以认为前操作的优先级很高，后操作的优先级很低
不要在一条语句中对同一个变量多次进行自增或
    自减计算，因为结果不确定

布尔值也是一种数据类型，这个类型中包含两个
    不同的数字，一个是真（true）另一个是假
    (false)
计算机里使用1代表真，0代表假
C语言中所有整数都可以当布尔值使用，0做布尔值
    使用时是假，其他整数都是真

逻辑表达式的计算结果只能是真或者假
逻辑表达式需要使用逻辑操作符编写

!是一个单目逻辑操作符，它表示求反（把一个
    布尔值变成相反的数值）

双目逻辑操作符包含==（等于），！=（不等于），
    >(大于),>=（大于等于）,<(小于）和
    <=(小于等于)

如果一个逻辑表达式中可能包含多个双目逻辑操作符
    则必须把它拆分成多个简单逻辑表达式(最多
    包含一个双目逻辑操作符的表达式)然后再合并

与(&&)和或(||)可以用来连接两个逻辑表达式

使用与连接的两个逻辑表达式中只要有一个的结果是
    假则合并后的结果也是假

使用或连接的两个逻辑表达式中只要有一个的结果
    是真则合并后的结果也是真

与（&&）和或（||）都具有短路特征（被连接的两个
     逻辑表达式中前一个的结果如果可以决定整个
     表达式的结果则后一个根本就不考虑）

如果一个表达式中既有算术操作符也有双目逻辑操作符
     则优先计算算术操作符

位操作符可以直接操作字节中的单个二进制数位

~代表一个单目位操作符，它可以把一个补码中所有
    二进制数位求反，它叫做按位求反操作符

双目位操作符包括按位与(&)，按位或(|)和按位亦或
    （^）
双目位操作符首先把两个数字的补码计算出来然后
    对他们对应数位上的数字进行计算

按位与（&）把对应数位上的数字进行与计算
    0  &   0           0
    0  &   1           0
    1  &   1           1

    3      0000 0011
&   5      0000 0101
           0000 0001

按位与可以把某些二进制数位清0
任何二进制数位和1做按位与结果不变，和0做
    按位与结果是0

按位或（|）把对应数位上的数字进行或计算
    0  |  0       0
    0  |  1       1
    1  |  1       1

    3     0000 0011
|   5     0000 0101
          0000 0111
按位或可以把某些二进制数位设置成1
任何二进制数位和0做按位或结果不变，和1做
    按位或结果是1

按位亦或(^)可以把对应数位上的数字进行亦或计算
    0  ^   0      0
    0  ^   1      1
    1  ^   1      0
    3     0000 0011
^   5     0000 0101
          0000 0110
按位亦或可以把某些二进制数位求反
任何二进制数位和0做按位亦或结果不变，和1做按位
    亦或结果变成相反数值

移位操作可以把一个数字的所有二进制数位统一
    向左或者向右移动n位
左移使用<<操作符实现
右移使用>>操作符实现
这两个操作符都是双目操作符，左边的数字表示
    要进行移位操作的数字，右边的数字表示
    移动的位数
移位操作不会修改任何存储区里的内容

移位操作完成后有些数位上的数字会丢失，有些数位
    上会填充新数字

左移的时候空出来的位置上一定会填充0

有符号数据右移后左边空出来的位置上一定补充
    符号位，无符号数据右移后左边空出来的
    位置上一定补充0.

一般情况下一个数字向左移动n位相当于乘以2
    的n次方，向右移动n位相当于除以2的n次方

&操作符用来表示获得一个存储区的地址
这个操作符只能针对存储区进行操作
%p是一个占位符，专门用来打印地址数据

*操作符可以根据一个地址找到对应的存储区
使用的时候在*操作符的后边要提供一个地址数据

预习：
    1.三目操作符
    2.数据类型转换
    3.分支语句

作业：
    1.编程判断一个用户给定的年份是不是闰年
       如果一个年份可以被4整除但是不能被100整除
        那它是闰年
       如果一个年份可以被400整除那它也是闰年
    2.假设使用一个字符类型变量控制红绿灯
        bit0用来控制红灯，bit1用来控制黄灯，
        bit2用来控制绿灯
        如果数位上的数字是1则对应的灯亮，否则
        就熄灭
       1)编写语句在不知道变量内容的情况下
             点亮红灯，熄灭其他两盏灯
       2)在上一步结果的基础上点亮绿灯，熄灭
             另外两盏灯
    3.从键盘得到一个1到127之间的整数，把它的
        所有二进制数位打印在屏幕上(直接把存储区
        里的二进制数位打印出来)




